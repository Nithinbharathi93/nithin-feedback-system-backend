import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import mysql from "mysql2/promise";
dotenv.config();
const PORT = 3000;
const app = express();
app.use(cors());
app.use(express.json());
async function initDatabase() {
  const connection = await mysql.createConnection({
    host: "localhost",
    user: "nithin",
    password: "nithin",
  });
  await connection.query(`CREATE DATABASE IF NOT EXISTS feedbackdb`);
  await connection.query(`USE feedbackdb`);
  await connection.query(`
    CREATE TABLE IF NOT EXISTS teams (
      id INT PRIMARY KEY AUTO_INCREMENT,
      name VARCHAR(50) UNIQUE NOT NULL
    )
  `);
  const [teamRows] = await connection.query(`SELECT COUNT(*) AS count FROM teams`);
  if (teamRows[0].count === 0) {
    await connection.query(`
      INSERT INTO teams (name) VALUES 
      ('dev'), ('ops'), ('sec'), ('spt')
    `);
    console.log("✅ Inserted default teams");
  }
  await connection.query(`
    CREATE TABLE IF NOT EXISTS users (
      id INT PRIMARY KEY AUTO_INCREMENT,
      username VARCHAR(50) UNIQUE NOT NULL,
      name VARCHAR(100),
      passwordHash VARCHAR(255),
      role ENUM('manager', 'employee') NOT NULL,
      teamId INT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (teamId) REFERENCES teams(id) ON DELETE SET NULL
    )
  `);
  await connection.query(`
    CREATE TABLE IF NOT EXISTS feedback (
      id INT PRIMARY KEY AUTO_INCREMENT,
      employeeId INT NOT NULL,
      managerId INT NOT NULL,
      strengths TEXT,
      improvements TEXT,
      sentiment ENUM('positive', 'neutral', 'negative') NOT NULL,
      acknowledged BOOLEAN DEFAULT FALSE,
      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (employeeId) REFERENCES users(id) ON DELETE CASCADE,
      FOREIGN KEY (managerId) REFERENCES users(id) ON DELETE CASCADE
    )
  `);
  console.log("✅ Database and tables ready");
  return connection;
}

const db = await initDatabase(); 
export default db;
const jwtSecret = "hey-there";
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.sendStatus(401);
  jwt.verify(token, jwtSecret, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}
app.get("/", (req, res) => {
  res.send({ msg: "hey there" });
});

app.post("/api/users", async (req, res) => {
  const { username, name, password, role, teamName } = req.body;
  const hash = await bcrypt.hash(password, 10);
  try {
    const [teamRows] = await db.execute("SELECT id FROM teams WHERE name = ?", [teamName]);
    const teamId = teamRows[0]?.id;
    if (!teamId) return res.status(400).json({ msg: "Invalid team name" });
    const [rows] = await db.execute(
      "INSERT INTO users (username, name, passwordHash, role, teamId) VALUES (?, ?, ?, ?, ?)",
      [username, name, hash, role, teamId]
    );
    res.status(201).json({ msg: "User created", userId: rows.insertId });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/api/auth/login", async (req, res) => {
  const { username, password } = req.body;
  try {
    const [rows] = await db.execute("SELECT * FROM users WHERE username = ?", [username]);
    const user = rows[0];
    if (!user) return res.status(401).json({ msg: "Invalid username or password" });
    const match = await bcrypt.compare(password, user.passwordHash);
    if (!match) return res.status(401).json({ msg: "Invalid username or password" });
    const token = jwt.sign({ id: user.id, role: user.role, teamId: user.teamId }, jwtSecret);
    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get("/api/users/me", authenticateToken, async (req, res) => {
  try {
    const [rows] = await db.execute(
      `SELECT u.id, u.username, u.name, u.role, t.name AS team 
       FROM users u 
       LEFT JOIN teams t ON u.teamId = t.id 
       WHERE u.id = ?`,
      [req.user.id]
    );
    if (!rows.length) return res.status(404).json({ msg: "User not found" });
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get("/api/users/team", authenticateToken, async (req, res) => {
  if (req.user.role !== "manager") {
    return res.status(403).json({ msg: "Access denied" });
  }
  try {
    
    const [[manager]] = await db.execute(
      "SELECT teamId FROM users WHERE id = ? AND role = 'manager'",
      [req.user.id]
    );
    if (!manager || !manager.teamId) {
      return res.status(404).json({ msg: "Manager or team not found" });
    }
    
    const [rows] = await db.execute(
      "SELECT id, name, username FROM users WHERE teamId = ? AND id != ? and role = 'employee'",
      [manager.teamId, req.user.id]
    );
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/api/feedback", authenticateToken, async (req, res) => {
  if (req.user.role !== "manager") return res.status(403).json({ msg: "Access denied" });
  const { employeeId, strengths, improvements, sentiment } = req.body;
  try {
    await db.execute(
      "INSERT INTO feedback (employeeId, managerId, strengths, improvements, sentiment) VALUES (?, ?, ?, ?, ?)",
      [employeeId, req.user.id, strengths, improvements, sentiment]
    );
    res.status(201).json({ msg: "Feedback submitted" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get("/api/feedback/history/:id", authenticateToken, async (req, res) => {
  const employeeId = parseInt(req.params.id);
  if (req.user.role === "employee" && req.user.id !== employeeId) {
    return res.status(403).json({ msg: "Access denied" });
  }
  try {
    const [rows] = await db.execute("SELECT * FROM feedback WHERE employeeId = ?", [employeeId]);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.put("/api/feedback/:id", authenticateToken, async (req, res) => {
  if (req.user.role !== "manager") return res.status(403).json({ msg: "Access denied" });
  const { strengths, improvements, sentiment } = req.body;
  try {
    await db.execute(
      "UPDATE feedback SET strengths = ?, improvements = ?, sentiment = ? WHERE id = ? AND managerId = ?",
      [strengths, improvements, sentiment, req.params.id, req.user.id]
    );
    res.json({ msg: "Feedback updated" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.get("/api/feedback/single/:id", authenticateToken, async (req, res) => {
  if (req.user.role !== "manager") return res.status(403).json({ msg: "Access denied" });
  try {
    const [rows] = await db.execute(
      "SELECT * FROM feedback WHERE id = ? AND managerId = ?",
      [req.params.id, req.user.id]
    );
    if (rows.length === 0) return res.status(404).json({ msg: "Feedback not found" });
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.put("/api/feedback/ack/:id", authenticateToken, async (req, res) => {
  if (req.user.role !== "employee") return res.status(403).json({ msg: "Access denied" });
  const { id } = req.params;
  try {
    await db.execute("UPDATE feedback SET acknowledged = 1 WHERE id = ? AND employeeId = ?", [id, req.user.id]);
    res.json({ msg: "Feedback acknowledged" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.get("/api/dashboard/manager", authenticateToken, async (req, res) => {
  if (req.user.role !== "manager") return res.status(403).json({ msg: "Access denied" });
  try {
    const [rows] = await db.execute(`
      SELECT employeeId, COUNT(*) AS feedbackCount,
             SUM(sentiment = 'positive') AS positive,
             SUM(sentiment = 'neutral') AS neutral,
             SUM(sentiment = 'negative') AS negative
      FROM feedback
      WHERE managerId = ?
      GROUP BY employeeId`, [req.user.id]);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get("/api/dashboard/employee", authenticateToken, async (req, res) => {
  if (req.user.role !== "employee") return res.status(403).json({ msg: "Access denied" });
  try {
    const [rows] = await db.execute("SELECT * FROM feedback WHERE employeeId = ? ORDER BY timestamp DESC", [req.user.id]);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.listen(PORT, () => console.log(`Server listening at http://localhost:${PORT}`));
